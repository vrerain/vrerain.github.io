<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于哈夫曼树的数据压缩算法</title>
      <link href="/2020/05/27/ji-yu-ha-fu-man-shu-de-shu-ju-ya-suo-suan-fa/"/>
      <url>/2020/05/27/ji-yu-ha-fu-man-shu-de-shu-ju-ya-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>本文是记录数据结构习题解析与实验指导的课后实验五—基于哈夫曼树的数据压缩算法。</p><h3 id="1-实验内容"><a href="#1-实验内容" class="headerlink" title="1 实验内容"></a>1 实验内容</h3><p>描述<br>输入一串字符串，根据给定的字符串中字符出现的频率建立相应哈夫曼树，构造哈夫曼编码表，在此基础上可以对待压缩文件进行压缩（即编码），同时可以对压缩后的二进制编码文件进行解压（即译码）。</p><p>输入<br>多组数据，每组数据一行，为一个字符串（只考虑26个小写字母即可）。当输入字符串为“0”时，输入结束。</p><p>输出<br>每组数据输出2n+3行（n为输入串中字符类别的个数）。第一行为统计出来的字符出现频率（只输出存在的字符，格式为：字符：频度），每两组字符之间用一个空格分隔，字符按照ASCII码从小到大的顺序排列。第二行至第2n行为哈夫曼树的存储结构的终态（形如教材139页表5.2（b），一行当中的数据用空格分隔）。第2n+1行为每个字符的哈夫曼编码（只输出存在的字符，格式为：字符：编码），每两组字符之间用一个空格分隔，字符按照ASCII码从小到大的顺序排列。第2n+2行为编码后的字符串，第2n+3行为解码后的字符串（与输入的字符串相同）。</p><p>样例输入1<br>aaaaaaabbbbbccdddd<br>aabccc<br>0</p><p>样例输出1<br>a:7 b:5 c:2 d:4<br>1 7 7 0 0<br>2 5 6 0 0<br>3 2 5 0 0<br>4 4 5 0 0<br>5 6 6 3 4<br>6 11 7 2 5<br>7 18 0 1 6<br>a:0 b:10 c:110 d:111<br>00000001010101010110110111111111111<br>aaaaaaabbbbbccdddd<br>a:2 b:1 c:3<br>1 2 4 0 0<br>2 1 4 0 0<br>3 3 5 0 0<br>4 3 5 2 1<br>5 6 0 3 4<br>a:11 b:10 c:0<br>111110000<br>aabccc</p><h3 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h3><p>这里可以参考<a href="https://wenku.baidu.com/view/170a46fa814d2b160b4e767f5acfa1c7aa008299.html" target="_blank" rel="noopener">课本</a>P138–P141,给出的解法很详细。</p><h3 id="3-数据结构代码实现"><a href="#3-数据结构代码实现" class="headerlink" title="3 数据结构代码实现"></a>3 数据结构代码实现</h3><p>1.存储状态的数据结构：<br><img src="https://img-blog.csdnimg.cn/20200526082250504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>2 树的创建</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span> lChild<span class="token punctuation">;</span>    <span class="token keyword">int</span> rChild<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initNode</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于下方最小两个数的查找</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">createTree</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> solvedData<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">searchTwoNumber</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span>solvedData<span class="token punctuation">,</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>        point <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> data<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> data<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> s1<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> solvedData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> point<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>solvedData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">searchTwoNumber</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token keyword">int</span> solvedData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&amp;&amp;</span> <span class="token function">contains</span><span class="token punctuation">(</span>solvedData<span class="token punctuation">,</span>i<span class="token punctuation">,</span>point<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">=</span> m<span class="token punctuation">;</span>            m <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&amp;&amp;</span> <span class="token function">contains</span><span class="token punctuation">(</span>solvedData<span class="token punctuation">,</span>i<span class="token punctuation">,</span>point<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>s1 <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token operator">*</span>s2 <span class="token operator">=</span> n<span class="token punctuation">;</span>    solvedData<span class="token punctuation">[</span>point<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>    solvedData<span class="token punctuation">[</span>point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getCharData</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>len <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> asc<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//scanf("%s",data);</span>    <span class="token function">getCharData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span>asc<span class="token punctuation">)</span><span class="token punctuation">;</span>    node test<span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c:%d "</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">,</span>asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initNode</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createTree</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先是剥离字符串，获得不同字母的个数，并且将每个字母的个数存在asc数组中。</p><p>接着构造一个2*len的数组，用于存储，下标0不用，从1开始存储，然后利用asc数组，初始化weight.并且打印出题目要求输出的第一行。</p><p>接着初始化每个节点的weight,rChild,lChild,这里把下标为0的赋为无穷大，用于下方的查找。</p><p>然后创建树，创建树的过程中有一个查找两个最小数据的过程。这时就用到了data[0].weight.并且将查过的数据放到solvedData数组中，以便判断是否已经查找过。</p><p>3.利用构建好的树求解哈夫曼编码</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> result2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">==</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">==</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        id <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    point<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>point <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result2<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span>        point<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result2<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c:%s "</span><span class="token punctuation">,</span>position<span class="token operator">+</span><span class="token number">96</span><span class="token punctuation">,</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从叶子节点开始网上找，直到根节点。左子树记0，右子树记1，然后因为是从底向上，所以要反转。</p><h3 id="4-全部代码"><a href="#4-全部代码" class="headerlink" title="4 全部代码"></a>4 全部代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span> lChild<span class="token punctuation">;</span>    <span class="token keyword">int</span> rChild<span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initNode</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于下方最小两个数的查找</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">createTree</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> solvedData<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">searchTwoNumber</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span>solvedData<span class="token punctuation">,</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>        point <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> data<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> data<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> s1<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> solvedData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> point<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>solvedData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">searchTwoNumber</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token keyword">int</span> solvedData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&amp;&amp;</span> <span class="token function">contains</span><span class="token punctuation">(</span>solvedData<span class="token punctuation">,</span>i<span class="token punctuation">,</span>point<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">=</span> m<span class="token punctuation">;</span>            m <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&amp;&amp;</span> <span class="token function">contains</span><span class="token punctuation">(</span>solvedData<span class="token punctuation">,</span>i<span class="token punctuation">,</span>point<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>s1 <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token operator">*</span>s2 <span class="token operator">=</span> n<span class="token punctuation">;</span>    solvedData<span class="token punctuation">[</span>point<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>    solvedData<span class="token punctuation">[</span>point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getCharData</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>len <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild<span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span>node data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> result2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">==</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">==</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        id <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    point<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>point <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result2<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span>        point<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result2<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c:%s "</span><span class="token punctuation">,</span>position<span class="token operator">+</span><span class="token number">96</span><span class="token punctuation">,</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> asc<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//scanf("%s",data);</span>    <span class="token function">getCharData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span>asc<span class="token punctuation">)</span><span class="token punctuation">;</span>    node test<span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c:%d "</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">,</span>asc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initNode</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createTree</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">coding</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%s"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong> 由于对c字符数组的存储忘得有些厉害，所以这里的编码并没有存储起来，并且也是按字符顺序输出的。和题目要求不太一样，但是编码已知，只需存储起来，然后遍历字符串，然后进行输出即可。</p><p>如果看了有收获，可以点赞加关注😉，看计算机小白的成长之路。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于二叉树的表达式求值算法</title>
      <link href="/2020/05/27/ji-yu-er-cha-shu-de-biao-da-shi-qiu-zhi-suan-fa/"/>
      <url>/2020/05/27/ji-yu-er-cha-shu-de-biao-da-shi-qiu-zhi-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>本文记录数据结构习题解析与实验指导（李冬梅）的课后实验六——基于二叉树的表达式求值算法</p><h3 id="1-实验内容"><a href="#1-实验内容" class="headerlink" title="1 实验内容"></a>1 实验内容</h3><p>没有找到实验的文字版本，只能把实验书的图片放上来了😅</p><p><img src="https://img-blog.csdnimg.cn/20200527110725462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h3><p>其实思路和<a href="https://blog.csdn.net/qq_44028290/article/details/106072260" target="_blank" rel="noopener">中缀算术表达式求值</a>这篇文章是一样的。两个栈，一个存操作符，一个存结果，只不过这次存结果的栈要改成存树。于是入栈就要改成这样：<br>遇到数字：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Tree t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span>ans <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>需要计算时：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate2</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Tree t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>然后都结束后，我们的存树的栈的栈顶数据就会是二叉树的根节点。<br><img src="https://img-blog.csdnimg.cn/20200527132340587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>然后，我们从根节点出发，利用递归，来求值。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> lValue<span class="token punctuation">,</span> <span class="token keyword">int</span> rValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">+</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">-</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">*</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">/</span> rValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>Tree t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lValue<span class="token punctuation">,</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            lValue <span class="token operator">=</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            rValue <span class="token operator">=</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>oper<span class="token punctuation">,</span> lValue<span class="token punctuation">,</span> rValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-全部代码"><a href="#3-全部代码" class="headerlink" title="3 全部代码"></a>3 全部代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> oper<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    Tree left<span class="token punctuation">;</span>    Tree right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Tree</span><span class="token punctuation">(</span>Tree left<span class="token punctuation">,</span> Tree right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ExpressionCalculate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Tree<span class="token operator">></span> stack1<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExpressionCalculate</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate2</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Tree t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            t3<span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">>=</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                t <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> lValue<span class="token punctuation">,</span> <span class="token keyword">int</span> rValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">+</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">-</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">*</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            <span class="token keyword">return</span> lValue <span class="token operator">/</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>Tree t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lValue<span class="token punctuation">,</span> rValue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            lValue <span class="token operator">=</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            rValue <span class="token operator">=</span> <span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>oper<span class="token punctuation">,</span> lValue<span class="token punctuation">,</span> rValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Tree t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span>ans <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">></span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">char</span> c <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">calculate2</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">evaluateExpTree</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        String test <span class="token operator">=</span> <span class="token string">"(3*5+3)/6+5+3*4"</span><span class="token punctuation">;</span>        ExpressionCalculate e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionCalculate</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里这篇文章就结束了。如果有错误，可以在下方评论，或者私聊我😉，我会及时改正的。</p><p>如果看了有收获，可以点赞加关注😉，看计算机小白的成长之路。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广义表的存储及比较</title>
      <link href="/2020/05/22/guang-yi-biao-de-cun-chu-ji-bi-jiao/"/>
      <url>/2020/05/22/guang-yi-biao-de-cun-chu-ji-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p>本文记录了关于广义表的存储，以及比较两个广义表是否相等的一个题目。</p><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1 题目描述"></a>1 题目描述</h3><p>【问题描述】</p><p>请写出判断两个广义表是否相等的递归算法，如果两个广义表相等，则输出1，否则输出0。如A=((a))，B=((a))，则A=B，输出1。要求输入的广义表采用链式存储结构存储，并基于链式存储结构编写递归函数。</p><p>【输入形式】</p><p>输入为由原子元素（数字，字符）、逗号、圆括号组成的广义表。先输入一个广义表，回车后再输入一个广义表。</p><p>【输出形式】</p><p>数字1，或者0。</p><p>【样例输入】</p><p>((a),b)</p><p>((a),b)</p><p>【样例输出】</p><p>1</p><p>【样例说明】<br>【评分标准】如果广义表未采用链式存储结构存储，或未基于链式存储结构编写递归函数，都不得分</p><h3 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h3><p>思路很简单。用链式结构存储，然后递归比较是否相等。但是由于自己的指 针知识学的很不扎实。做这道简单的题目做了好久。下面介绍一下我做的时候遇到的难点。</p><p>难点一：链式结构的设计。因为可能括号层数很多。所以我就设计成这样的结构。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> GLNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token keyword">char</span> atom<span class="token punctuation">;</span>    <span class="token keyword">struct</span> GLNode <span class="token operator">*</span>hp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> GLNode <span class="token operator">*</span>tp<span class="token punctuation">;</span><span class="token punctuation">}</span>glNode<span class="token punctuation">,</span><span class="token operator">*</span>Glist<span class="token punctuation">;</span></code></pre><p>tag代表标签，如果标签为0，就表示是一个普通元素。这时把hp赋值空（tp代表同层中的另一个元素，hp表示下一层。）。如果标签为1，则表示是（m,n)这种类型的元素。所以要创建子层，然后hp指向它。<br>这里你可能会问，为啥不把hp和atom设计成一个union类型，这，，，只能说自己太菜了，玩不六union.<br><img src="https://img-blog.csdnimg.cn/20200521104444371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>数据结构的设计其实并不难。大概是脑子短路了，才觉得这很难😥.</p><p>难点二：如果将输入的字符串存入结构。<br>如果是单个元素，貌似很容易，但是如果是有括号，那怎么办呢。到右括号时看成一个元素。额，貌似不对，如果多个括号怎么办。于是这里我用一个变量记录括号层数。左括号+1，右括号-1，变量为0时也就是成功的剥离出了一个带括号的元素。</p><p>难点三：如何比较是否相等，这个其实是比较简单的递归。每一层的比较方式都相同，如果遇到子层，则递归调用，就好了，同一层的就在比较方法里进行比较。</p><h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3 具体实现"></a>3 具体实现</h3><p>1.数据的剥离：</p><pre class=" language-cpp"><code class="language-cpp">Glist <span class="token function">storage2</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Glist head <span class="token operator">=</span> <span class="token keyword">new</span> glNode<span class="token punctuation">;</span>    Glist temp<span class="token punctuation">;</span>    Glist w <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">','</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">storage</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> i <span class="token operator">-</span> point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token operator">-</span><span class="token operator">></span>tp <span class="token operator">=</span> temp<span class="token punctuation">;</span>            w <span class="token operator">=</span> w<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            point <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看着是不是有点懵，有一种想小声嘀咕（这是什么垃圾代码）的冲动。好吧，我也有这种冲动。不过尽管如此，我还是想解释一下我的代码😂。首先申请一个头节点。然后定义一个结构体的指针变量temp。然后再定义一个结构体的指针变量w。w指向头节点。前两个判断语句就不说了，用来判断层数的。然后第三个if，一旦执行，就表示找到了一个元素，一开始point指向1（去除了最外围的‘（’），然后找到了一个元素，此时i应该指向的是逗号，然后就应该明白元素的截取了。flag=0表示重新计算层次。</p><p>接下来是硬核。w-&gt;tp = temp,这是什么意思，这里storage函数的意思是，把元素按照约定的方式存储，然后把第一个节点返回来。<br><img src="https://img-blog.csdnimg.cn/20200521105813828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>这时候相当于返回绿圈中的节点。如果传入的参数就是单个元素，则返回类似第一个圈的节点。否则就返回第二个圈的节点。然后我们要做什么，就像图上所说的。把头节点指向它不就可以吗。这就是w-&gt;tp = temp;然后w = w-&gt;tp,这样就可存储右面的绿圈了。</p><p>2.数据的存储：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span>Glist <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l <span class="token operator">=</span> <span class="token keyword">new</span> glNode<span class="token punctuation">;</span>    l<span class="token operator">-</span><span class="token operator">></span>tp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">storage</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>hp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">storage</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>又是一段垃圾代码，这段代码就只讲一下元素截取吧，第一个截取，去外层括号（例如，传入的是(a,b)，这时把外层括号剥离）。第二个截取，就是a,b这种情况，把前面的a存储起来，然后把a,剥离，存储b。第一个if（s.len…是为了地方()的情况。第二个if(s.len…..是为了判别传入的元素只有一个这种情形。</p><p>对于一个没怎么学过c++的人来说，new似乎很神奇，其实它就等价于(Glist)malloc(sizeof(glNode))，不过new和malloc是有很大区别的，具体可以<br>参考这篇<a href="https://blog.csdn.net/Cheng_1992/article/details/74780146" target="_blank" rel="noopener">博文</a> ，这里再讲一种错误的情况，一开始我写的时候，传入的是temp,不过，我把temp的指向改为了head-&gt;tp;然后我在storage函数中（参数为Glist  l,没有&amp;别名)直接写Glist n = new glNode,然后l = n;然后在storage2函数中temp=temp-&gt;tp,本想着这样实现。</p><p>后来就发现这种做法是错误的，根本无法运行，temp = temp-&gt;tp这句根本无法执行，为啥无法执行呢，因为temp是空的。你（我）可能会问，l = n,不就相当于temp = n，这不是有值吗。其实一开始的时候，temp = head-&gt;tp,这时temp就是空，然后传入，l= n,这句话执行以后并没有让head-&gt;tp = n,temp的指向依旧是空，只不过l的指向改变了，换句话说就是你传入的是temp存储的值，你并没有对temp里面存的内容改变成功。</p><p>所以这时候就可以用别名，这时传入的参数其实就是head-&gt;tp的地址，上边传入的其实是一个空值。如果不想用别名，那么就得传入temp的地址，即传入&amp;temp,参数也得改为Glist <em>l,然后（</em>l)=n;这样也可样，但是比较复杂。</p><p>这里我花了很长时间，不得不佩服我啊😅。</p><p>3.数据的比较：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">cha</span><span class="token punctuation">(</span>Glist l<span class="token punctuation">,</span> Glist m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">!=</span> m<span class="token operator">-</span><span class="token operator">></span>atom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">+</span><span class="token operator">=</span><span class="token function">cha</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l <span class="token operator">=</span> l<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>        m <span class="token operator">=</span> m<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个就太简单了，就不说了。cnt=0时，即所有元素都相等。！=0，即有元素不相等。</p><h3 id="4-全部代码"><a href="#4-全部代码" class="headerlink" title="4 全部代码"></a>4 全部代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> GLNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token keyword">char</span> atom<span class="token punctuation">;</span>    <span class="token keyword">struct</span> GLNode <span class="token operator">*</span>hp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> GLNode <span class="token operator">*</span>tp<span class="token punctuation">;</span><span class="token punctuation">}</span>glNode<span class="token punctuation">,</span><span class="token operator">*</span>Glist<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span>Glist <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l <span class="token operator">=</span> <span class="token keyword">new</span> glNode<span class="token punctuation">;</span>    l<span class="token operator">-</span><span class="token operator">></span>tp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">storage</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>hp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">storage</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>Glist <span class="token function">storage2</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Glist head <span class="token operator">=</span> <span class="token keyword">new</span> glNode    Glist temp<span class="token punctuation">;</span>    Glist w <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">','</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">storage</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> i <span class="token operator">-</span> point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token operator">-</span><span class="token operator">></span>tp <span class="token operator">=</span> temp<span class="token punctuation">;</span>            w <span class="token operator">=</span> w<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            point <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">cha</span><span class="token punctuation">(</span>Glist l<span class="token punctuation">,</span> Glist m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>atom <span class="token operator">!=</span> m<span class="token operator">-</span><span class="token operator">></span>atom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">-</span><span class="token operator">></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">+</span><span class="token operator">=</span><span class="token function">cha</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token operator">></span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l <span class="token operator">=</span> l<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>        m <span class="token operator">=</span> m<span class="token operator">-</span><span class="token operator">></span>tp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string d1 <span class="token operator">=</span> <span class="token string">"((a,b),c)"</span><span class="token punctuation">;</span>    string d2 <span class="token operator">=</span> <span class="token string">"((a,b),c)"</span><span class="token punctuation">;</span>    Glist h1 <span class="token operator">=</span> <span class="token function">storage2</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Glist h2 <span class="token operator">=</span> <span class="token function">storage2</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">cha</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-一点收获"><a href="#5-一点收获" class="headerlink" title="5 一点收获"></a>5 一点收获</h3><p>1.查错，一开始对指向的认知错误，之所以用了很长时间，也是因为自己的查错能力不行，以后再遇到这种情况是，一定要冷静，从头开始履，然后debug，或者打印值，找到错误的语句，然后勇于推翻自己，不要老认为自己想的是对的。错误的认知对人的危害是非常大的。</p><p>2.勇于动手，一开始剥离元素对自己来说是比较难的。感觉自己做不出来，就一直没动手，动手之后才发现，思路就是在一点一点中被挖掘出来。所以遇到较难的，难以实现的，要勇于动手。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛇形矩阵的创建</title>
      <link href="/2020/05/22/she-xing-ju-zhen-de-chuang-jian/"/>
      <url>/2020/05/22/she-xing-ju-zhen-de-chuang-jian/</url>
      
        <content type="html"><![CDATA[<p>这是记录我做的一道关于蛇形矩阵的文章</p><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1 题目描述"></a>1 题目描述</h3><p>【问题描述】<br>将1，2，…,n*n个自然数，按蛇形方式存放在二维数组A[n][n]中。“蛇型”方式，即是按“副对角线”平行的各对角线，从左下到右上，再从右上到左下，存放n2个整数。例如：</p><p>1   3    4<br>2   5    8<br>6   7    9</p><p>【输入形式】 输入数组的阶数n。<br>【输出形式】 打印数据元素按蛇形排列的数组，整数打印的域宽为4。<br>【样例输入】3<br>【样例输出】<br>1 3 4<br>2 5 8<br>6 7 9<br>【样例说明】矩阵的阶数为3，打印按蛇形存放的1~9，注意域宽为4。</p><h3 id="2-解决思路"><a href="#2-解决思路" class="headerlink" title="2 解决思路"></a>2 解决思路</h3><p>首先一开始，我就开始猜规律，妄想用一种规律来解这道题目。很长很长时间后😅😅，发现这似乎不现实。然后我仿着大脑的思路，试图解决这道问题，结果就解决了。猛然之间有了一种“编程就是仿照人的思路告诉计算机怎么做的过程”感悟。</p><p>我们来看样例，发现可以有第一次打印1个，，第二次打印两个，第三次打印3个，第四次打印2个，第五次打印1个这样的规律。这样就可以用for循环控制打印个数。</p><p>然后，每一次打印分为两种状态，分别是上行，下行。也就是左下到右上，右上到左下。这样我们可以定义一个记录状态的变量。并且我们还发现。上行和下行是交替进行的。这就相当于解决了一大半问题。</p><p>最后一个问题，如何解决第一次到第二次这样的过度呢。我们发现其实一共有两种过度。一种是向下。一种是向右，这样我们定义两种状态。这两种状态也是交替进行的。等等，好像不是，发现如果到了右上角的元素，下一个状态不会改变，再找一找还有没有例外，。。。。。没了。于是，我们就可以针对这种例外做一个判断。</p><p>之后，这道题目就做出来了。😁</p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//flag为0代表向下，为1代表向右</span>    <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//走的状态,上行为1，下行为2</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> point<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token operator">--</span><span class="token punctuation">;</span>                w<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> w <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            w<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> point<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token operator">--</span><span class="token punctuation">;</span>                w<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> w <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            w<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里这篇文章就结束了。如果有错误，可以在下方评论，或者私聊我😉，我会及时改正的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于kmp字符串模式匹配算法的病毒感染检测问题</title>
      <link href="/2020/05/22/ji-yu-kmp-zi-fu-chuan-mo-shi-pi-pei-suan-fa-de-bing-du-gan-ran-jian-ce-wen-ti/"/>
      <url>/2020/05/22/ji-yu-kmp-zi-fu-chuan-mo-shi-pi-pei-suan-fa-de-bing-du-gan-ran-jian-ce-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>本文记录了数据结构习题解析与实验指导（李冬梅）的实验4。<br>以下是实验内容</p><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><p>医学研究者最近发现了某些新病毒,通过对这些病毒的分析,得知它们的DNA序列都是环状的。现在研究者已收集了大量的病毒DNA和人的DNA数据,想快速检测出这些人是否感染了相应的病毒。为了方便研究,研究者将人的DNA和病毒DNA均表示成由一些字母组成的字符序列,然后检测某种病毒DNA序列是否在患者的DNA序列中出现过。如果出现过,则此人感染了该病毒,否则没有感染。例如,假设病毒的DNA序列为baa，患者1的DNA序列为aaabbba，则感染;患者2的DNA序列为babbba,则未感染。(注意,人的DNA序列是线性的,而病毒的DNA序列是环状的。)</p><p>输入要求<br>多组数据,每组数据一行,对应一个算术表达式,每个表达式均以“=”结尾。当表达式只有一个“=”时,输入结東。</p><p>输出要求<br>多组数据,每组数据有1行,为序列A和B,A对应病毒的DNA序列,B对应人的DNA序列。A和B都为“0”时输入结束。</p><p>输入样例<br>abbab abbabaab<br>baa cacdvcabacsd<br>abc def<br>0 0</p><p>输出样例<br>YES<br>YES<br>NO</p><h3 id="2-基本思想"><a href="#2-基本思想" class="headerlink" title="2 基本思想"></a>2 基本思想</h3><p>因为是环状的，所以可以将字符串A复制一遍。然后每次取原A长度的子串。之后进行字符串匹配，这里的子串匹配算法，我所知道的有两种，一种是BF(简单，但是效率很低),另一种是KMP算法(较难理解，但效率高)。本文是利用KMP算法进行求解。</p><h3 id="3-KMP算法"><a href="#3-KMP算法" class="headerlink" title="3 KMP算法"></a>3 KMP算法</h3><p>具体的思想就不讲了，讲一讲代码。<br>首先是求next数组的代码，（这里我的next数组是从下标0开始，第一个元素为-1的数组，另一种方法是从下标1开始存储，第一个元素为0的数组。两种方法很相似，这里介绍的是第一种方法。）</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> String parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> String son<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Kmp</span><span class="token punctuation">(</span>String parent<span class="token punctuation">,</span> String son<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>son <span class="token operator">=</span> son<span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>基本的数据结构就不讲了，讲一讲，关键的while循环。<br>首先有两个下标i,j分别表示最长前缀的末尾+1和最长后缀的末尾+1.如果相等，则各自加一，这应该很好懂。放一张图解释。<br><img src="https://img-blog.csdnimg.cn/20200519081210282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>(k就相当于代码中的i,j相当于代码中的j)，首先看第一行红色的。如果k和j位置的元素相等，自然而然地+1，然后看下一元素是否相等。<br>那么如果不等怎么办呢。这时看图的第二行，首先我们可以证明黄色的部分都是相同的。那么很明显只要让k=next[k]就可以再比较了。如果相等，接着各自加1.不过这里可能你会有个疑问，为啥k要跳到next[k]，才是最长的前缀呢。这里我们就要了解下next[k]的含义next[k]的含义是，k位置前的字符串最大前缀的末尾的下一个。仔细看一下图，你可能就会略懂了。而第三行蓝色的则是next[k]位置的元素和j位置的元素还不相等，那么k = next[next[k]]<br>的了。</p><p>最极端的时候，如果k=next[k] = -1时怎么办，那么就要再if的判断条件加上一句，关于k==-1时的判断。也就是各自都加一，也就是next[j+1]=0,然后k跳到0位置在比较。（当然这条判断也解决了初始时k==-1的问题）</p><p>最后可能会对小于len-1产生疑问。为啥不是len呢。因为我们比较的是j,但是我们实际填的是next[j+1].这里如果不懂就需要看一下手推next数组的教程了（注意这里用的是首位是-1的next数组求解方法)。</p><p>这里推荐一个视频，我觉得这个视频很好。看过之后有种恍然大悟的感觉😀。<a href="https://www.bilibili.com/video/BV16J41127gV?p=3" target="_blank" rel="noopener">视频传送门</a></p><h3 id="4-Kmp代码主体部分"><a href="#4-Kmp代码主体部分" class="headerlink" title="4 Kmp代码主体部分"></a>4 Kmp代码主体部分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>非常简单，就不讲了。</p><h3 id="5-全部代码"><a href="#5-全部代码" class="headerlink" title="5 全部代码"></a>5 全部代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Kmp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> String parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> String son<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Kmp</span><span class="token punctuation">(</span>String parent<span class="token punctuation">,</span> String son<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>son <span class="token operator">=</span> son<span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSon</span><span class="token punctuation">(</span>String son<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>son <span class="token operator">=</span> son<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test14</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String parent <span class="token operator">=</span> <span class="token string">"cacdvcabacsd"</span><span class="token punctuation">;</span>        String son <span class="token operator">=</span> <span class="token string">"baa"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Kmp test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Kmp</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> son<span class="token punctuation">)</span><span class="token punctuation">;</span>        son <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String newSon <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            test<span class="token punctuation">.</span><span class="token function">setSon</span><span class="token punctuation">(</span>newSon<span class="token punctuation">)</span><span class="token punctuation">;</span>            test<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-nextval数组"><a href="#6-nextval数组" class="headerlink" title="6 nextval数组"></a>6 nextval数组</h3><p>我们先来看这种情况，主串为”aaaaaxbcd”,字串为”aaaaab”,我们发现进行b的确认时，b与x不等，然后我们就要跳到倒数第一个a,倒数第二个a………这些过程似乎有些多余，所以我们发现如果后面的4个a,与首位的a相同的话，就完全可以用next[0]的值替代后面的四个a所对应位置的next数组的值。</p><p>具体代码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNextval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nextval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这就是全部的内容。如果有错误，可以在底下评论，或者私聊我😉，我会及时进行修改的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于栈的后缀算术表达式求值</title>
      <link href="/2020/05/22/ji-yu-zhan-de-hou-zhui-suan-zhu-biao-da-shi-qiu-zhi/"/>
      <url>/2020/05/22/ji-yu-zhan-de-hou-zhui-suan-zhu-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要是记录数据结构习题解析与实验指导（李冬梅）的课后实验三。</p><p>这次实验是利用后缀表达式来进行算术表达式求值，上篇博文介绍的是利用中缀表达式来进行算术表达式的求值。而这次实验是利用中缀表达式转换为后缀表达式，然后再利用后缀表达式进行求值。（之所以要转换为后缀表达式，是因为使用后缀表达式进行求值非常简单）</p><h3 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="1 基本思想"></a>1 基本思想</h3><p>首先说一下后缀表达式，后缀表达式又称为逆波兰表达式，后缀指的就是运算符在操作数的后面。计算方法简而言之就是<strong>遇到数字就进栈，遇到操作符就运算</strong>。<br>然后再说一下如何将中缀表达式转换为后缀表达式。<strong>从左到右遍历字符串，如果是数字就输出，如果是操作符，就判断与栈顶符号的优先级，是右括号或优先级不高于栈顶符号的则栈顶符号依次输出，并将当前符号进栈，若是优先级高于栈顶符号则进栈。</strong> 优先级可以参考下面的代码。</p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Expression2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Expression2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate2</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token operator">-</span>t<span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1 <span class="token operator">+</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2 <span class="token operator">/</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calcuate</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">calculate2</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">char</span> t <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                            t <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">>=</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test12</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        String test <span class="token operator">=</span> <span class="token string">"9+(3-1)*3+6/2"</span><span class="token punctuation">;</span>        Expression2 e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Expression2</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">calcuate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong> 两篇关于表达式的博文都只能对10以内的数进行计算，如果想要对大于10的数进行计算，需要进行一定的判断，然后进行入栈操作。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中缀算术表达式求值</title>
      <link href="/2020/05/22/zhong-zhui-suan-zhu-biao-da-shi-qiu-zhi/"/>
      <url>/2020/05/22/zhong-zhui-suan-zhu-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<p>这是记录数据结构习题解析与实验指导（李冬梅）实验二的一篇博文，具体内容就是给个中缀算术表达式，然后进行求值。<br>中缀算术表达式的求值方式有很多种，我学的有两种，一种就是用两个栈进行求解，也就是本文中所讲的，一种就是先转换为后缀表达式，然后后缀表达式通过一个栈进行求解，这是下一篇博文所要讲的。我所知道的还有一种方法，是利用树来进行算术表达式的求解。因为还没学，所以暂时先不写相应的博文。</p><h3 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="1 基本思想"></a>1 基本思想</h3><p>两个栈，一个存数字，一个存操作符。当要入栈的操作符的优先级高于操作符栈的优先级是，入栈，否则，弹出操作符进行计算，直至栈顶操作符的优先级低于当前操作符，然后将当前操作符压栈。如果遇到左括号，直接入栈，遇到右括号，则一直将操作符退栈，直到碰到左括号为止。+和-的优先级相同*和/优先级相同。<br>这里还有一个负号的问题需要鉴别，如果前面为‘）’或者数字时，才可能是减号，其余情况均是负号</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2 代码"></a>2 代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        String test <span class="token operator">=</span> <span class="token string">"(3*5+3)/6+3+-3*3"</span><span class="token punctuation">;</span>        ExpressionCalculate e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionCalculate</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ExpressionCalculate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Stack stack1<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stack stack2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExpressionCalculate</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate2</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token operator">-</span>t<span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1 <span class="token operator">+</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2 <span class="token operator">/</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">>=</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">></span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//#用来表示负号</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">></span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">calculate2</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码写的有些差😌，功能应该可以实现的。如果有不对的地方，可以在下方评论，我会及时进行修改的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的基本介绍</title>
      <link href="/2020/05/09/zhan-he-dui-lie-de-ji-ben-jie-shao/"/>
      <url>/2020/05/09/zhan-he-dui-lie-de-ji-ben-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>本文主要是介绍一下栈和队列，其中包括顺序栈，双栈，链栈，循环队列，链队的结构和相关操作的实现。</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>1.基本结构：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span>SqStack<span class="token punctuation">;</span></code></pre><p>2.初始化操作：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.判断栈空，求栈的长度，清空栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EmptyStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">StackLength</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-></span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ClearStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.入栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">>=</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.出栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.取栈顶：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="双栈"><a href="#双栈" class="headerlink" title="双栈"></a>双栈</h3><p>1.基本结构：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top1<span class="token punctuation">;</span>    <span class="token keyword">int</span> top2<span class="token punctuation">;</span><span class="token punctuation">}</span>SqDoubleStack<span class="token punctuation">;</span></code></pre><p>2.初始化：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-></span>top1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top2 <span class="token operator">=</span> MAXSIZE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.入栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>s<span class="token punctuation">,</span>ElemType e<span class="token punctuation">,</span><span class="token keyword">int</span> stackNumber<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top1<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> s<span class="token operator">-></span>top2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stackNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">++</span>s<span class="token operator">-></span>top1<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            s<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">--</span>s<span class="token operator">-></span>top2<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.出栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">,</span> <span class="token keyword">int</span> stackNumber<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stackNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top1<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-></span>top2 <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>1.基本结构：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>StackNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    StackNode <span class="token operator">*</span>top<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkStack<span class="token punctuation">;</span></code></pre><p>2.初始化操作：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitLinkStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    l<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.入栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PushLinkStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>l<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    l<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>    StackNode <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span>StackNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    temp<span class="token operator">-></span>next <span class="token operator">=</span> l<span class="token operator">-></span>top<span class="token punctuation">;</span>    l<span class="token operator">-></span>top <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.出栈：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PopLinkStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>l<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>e <span class="token operator">=</span> l<span class="token operator">-></span>top<span class="token operator">-></span>data<span class="token punctuation">;</span>        StackNode <span class="token operator">*</span>t<span class="token punctuation">;</span>        t <span class="token operator">=</span> l<span class="token operator">-></span>top<span class="token punctuation">;</span>        l<span class="token operator">-></span>top <span class="token operator">=</span> l<span class="token operator">-></span>top<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>1.基本结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token punctuation">}</span>Queue<span class="token punctuation">;</span></code></pre><p>2.初始化操作</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.入队操作</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE <span class="token operator">==</span> q<span class="token operator">-></span>front<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.出队操作</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> q<span class="token operator">-></span>front<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.计算队的长度</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear<span class="token operator">-</span>q<span class="token operator">-></span>front<span class="token operator">+</span>MAXSIZE<span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h3><p>1.基本结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> QNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> QNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>QNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>front<span class="token punctuation">;</span>    Qnode <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span></code></pre><p>2.初始化操作</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitLinkQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>QNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>rear <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">;</span>    q<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">:</span><span class="token punctuation">}</span></code></pre><p>3.入队</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnLinkQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span>QNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    temp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">:</span>    q<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>    q<span class="token operator">-></span>rear <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.出队</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeLinkQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        QNode <span class="token operator">*</span>temp <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">*</span>e <span class="token operator">=</span> temp<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token operator">-></span>rear <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            q<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就是栈和队列的一些基本操作。<br>下一次记录实验题目，表达式求值。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop环境搭建（2）</title>
      <link href="/2020/04/30/hadoop-huan-jing-da-jian-2/"/>
      <url>/2020/04/30/hadoop-huan-jing-da-jian-2/</url>
      
        <content type="html"><![CDATA[<p>首先第一篇文章介绍了如何配置hadoop基本环境，接下来进行伪分布式环境的搭建。</p><ol><li><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4></li></ol><p>首先说一下hadoop集群的基本结构。<br><img src="https://img-blog.csdnimg.cn/20200421101159308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>之后介绍一下它的三种模式:（下图英文缩写为上图中相应节点单词的缩写）<br><img src="https://img-blog.csdnimg.cn/20200421101302567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>所谓伪分布模式就是：通过在一台机器上运行不同的java进程来模拟分布式模式的不同节点，这时,所读取得文件属于分布式文件。伪分布式中的计算机不仅负责存储，而且还负责资源和作业的调度。<br>单机模式与伪分布式模式最大的不同是，单机模式所读取的是本地文件，而伪分布式模式读取的文件属于分布式文件，因为没有很多个节点来搭建分布式模式，所以这里用的是伪分布模式。</p><ol start="2"><li><h4 id="hadoop配置文件的修改。"><a href="#hadoop配置文件的修改。" class="headerlink" title="hadoop配置文件的修改。"></a>hadoop配置文件的修改。</h4>1.core-site.xml文件:<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>configuration<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>hadoop.tmp.dir<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>file:/usr/local/hadoop/tmp<span class="token operator">&lt;</span>/value<span class="token operator">></span>    <span class="token operator">&lt;</span>description<span class="token operator">></span>Abase <span class="token keyword">for</span> other temporary directories.<span class="token operator">&lt;</span>/description<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>fs.defaultFS<span class="token operator">&lt;</span>/name<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span>hdfs://localhost:9000<span class="token operator">&lt;</span>/value<span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre>hadoop.tmp.dir用于保存临时文件，如果没有配置这个参数，则默认使用的临时目录为/tmp/hadoo-hadoop，这个目录在Hadoop重启后会被系统清理掉。<br>fs.defaultFS用于指定HDFS的访问地址。</li></ol><p>2.hdfs-site.xml修改，</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>dfs.replication<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>1<span class="token operator">&lt;</span>/value<span class="token operator">></span>    <span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>dfs.namenode.name.dir<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>file:/usr/local/hadoop/tmp/dfs/name<span class="token operator">&lt;</span>/value<span class="token operator">></span>    <span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>dfs.datanode.data.dir<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>file:/usr/local/hadoop/tmp/dfs/data<span class="token operator">&lt;</span>/value<span class="token operator">></span>    <span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><p>dfs.replicaion：指定副本数量，在分布式文件系统中，数据通常会被冗余的存储多份，以保证可靠性和安全性，但是这里用的是伪分布式模式，节点只有一个，也有就只有一个副本。<br>dfs.namenode.name.di：设定名称节点元数据的保存目录<br>dfs.datanode.data.dir：设定数据节点的数据保存目录<br>这里，名称节点和数据节点必须设定。</p><p>Hadoop的运行方式是由配置文件决定的，如果想从伪分布式模式切换回单机模式，只需删除core-site.xml文件中的配置项即可。</p><p>3.执行名称节点格式化<br>执行命令：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/hadoop$ ./bin/hdfs namenode -format</code></pre><p>可能会报错，那就重新检查，hdfs-site.xml文件的配置。<br>直到出现<code>INFO util.ExitUtil: Exiting with status 0</code> 字样（0表示成功，1表示不成功)</p><p>4.启动hadoop</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/hadoop$ ./sbin/start-dfs.sh</code></pre><p>可能会报错<code>JAVA_HOME is not set and could not be found.</code><br>那么就把将<code>/hadoop/etc/hadoop/hadoop-env.sh</code>文件的<code>export JAVA_HOME=$JAVA_HOME</code>改为<code>export JAVA_HOME=/usr/local/java/jdk-14.0.1</code><br>然后用jps命令验证是否成功，（jps是用来查看运行的java进程的命令)</p><pre class=" language-bash"><code class="language-bash">$ jps4821 Jps4459 DataNode4348 NameNode4622 SecondaryNameNode</code></pre><p>也可以用第二种方法来验证：<br>关闭防火墙 或者 在防火墙的规则中开放这些端口<br>进入网址localhost:50070，<br>看到<br><img src="https://img-blog.csdnimg.cn/20200421105056349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>就算成功。</p><p>5.关闭hadoop<br>执行命令<code>./sbin/stop-dfs.sh</code> 之后就关闭了。<br>下次启动时不需要再执行节点格式化命令（否则会报错），只需要直接运行<code>start-dfs.sh</code>命令即可。<br>获取本文知识的主要途径包括，<a href="https://www.jianshu.com/p/d2f8c7153239" target="_blank" rel="noopener">博客</a>   书籍（hadoop权威指南)  <a href="https://edu.hellobi.com/course/93/overview" target="_blank" rel="noopener">视频</a><br>如果想详细的了解，可以看这三部分的相关内容。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop环境搭建（1）</title>
      <link href="/2020/04/30/hadoop-huan-jing-da-jian-1/"/>
      <url>/2020/04/30/hadoop-huan-jing-da-jian-1/</url>
      
        <content type="html"><![CDATA[<p>要搭建hadoop，首先要要有一台linux的机器，可以是虚拟机，服务器…..<br>有了Linux环境，接着就可已安装相应的hadoop环境了;<br>说一下我自己的环境：<br>ubuntu18.0.4(虚拟机）<br>jdk14<br>hadoop2.10<br>下面的命令，如果不是root用户，请自觉加上sudo</p><ol><li><h4 id="更新应用"><a href="#更新应用" class="headerlink" title="更新应用"></a>更新应用</h4></li></ol><p>执行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> upgrade</code></pre><p>因为ubuntu会从国外下载，可能速度会很慢，忍受不了的，可以更换镜像源。<br>编辑<code>etc/apt/sources.list</code>文件, 在文件最前面添加以下条目(操作前最好备份)：</p><pre class=" language-bash"><code class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre><p>这里用的是阿里的镜像源，如果是用的virtual box，可能还需要打开双向复制，首先右<code>ctrl</code>+c ，这样左上角可以看到下图（当然，本身就可以看到的，就不用操作）<br><img src="https://img-blog.csdnimg.cn/2020042018165087.png" alt=""><br>进入设备—-&gt;共享粘贴板—-&gt;双向<br>也可以“安装增强功能”方便与虚拟机进行文件传输。</p><ol start="2"><li><h4 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h4>1.首先官网下载jdk14,下载之后应该是一个.tat.gz的文件，在<code>/etc/local</code>下建立一个java文件夹，之后<code>cp 所下载的文件名 /etc/local/java</code>.然后进行解压,<code>tar -zxvf jdk14.0.1.tar.gz</code>。<br>2.配置环境变量，编辑<code>/etc/profile</code>文件，在末尾加上。</li></ol><pre><code>```JAVA_HOME=/usr/local/java/jdk-14.0.1PATH=.:$JAVA_HOME/bin:$PATHexport JAVA_HOME```</code></pre><p>然后执行命令<code>source /etc/profile</code><br>    之后可以运行命令，java -version，会出现相应的版本提示，其实，ubuntu自带了一个jdk版本，是openjdk，属于一个开源版本，如果使用它，那上面的环境变量就需要把JAVA_HOME改为<code>/usr/lib/jvm/java-11-openjdk-amd64</code>这样的目录，具体是什么，自己根据自己的电脑来。<br>    如果不使用openjdk,可以删除,<code>apt-get remove openjdk</code>如果不想删就得需要进行一定配置：(自己没有实验，这是借鉴别人的做法)<br>    系统中存在多个版本的JDK，使用下列命令设置一个默认的JDK</p><pre><code>```sudo update-alternatives --config javasudo update-alternatives --config javac```</code></pre><p>输入选择的java版本的编号。<br>    推荐一篇讲update-alternatives命令的<a href="https://www.jianshu.com/p/7313283d1cb9" target="_blank" rel="noopener">文章</a></p><ol start="3"><li><h4 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h4>1.安装ssh，<code>apt-get install openssh-server</code>,关于ssh，可以看这篇<a href="https://www.cnblogs.com/RXDXB/p/11672127.html" target="_blank" rel="noopener">文章</a><br>2.配置ssh, <code>ssh localhost</code><br>3.设置为无密码登陆， <pre class=" language-bash"><code class="language-bash"> <span class="token function">cd</span> ~/.ssh/ ssh-keygen -t rsa  <span class="token comment" spellcheck="true">#出现提示直接按enter</span></code></pre>4.<code>cat ./id_rsa.pub &gt;&gt; ./authorized_keys</code>  加入授权<br>之后，再次ssh localhost的时候就可以无密码登陆了。</li></ol><ol start="4"><li><h4 id="hadoop环境"><a href="#hadoop环境" class="headerlink" title="hadoop环境"></a>hadoop环境</h4><p>1.下载hadoop，这里需要下载<br><img src="https://img-blog.csdnimg.cn/20200420185625819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>这种的。下载之后复制到/usr/local中，之后解压，把解压后的文件夹名字改为hadoop,这样比较方便。最后，给这个文件夹赋予用户权限<code>sudo chown -R dong ./hadoop</code>.<br>2.之后还是修改环境变量，编辑/etc/profile ，在原有的基础上改为这种样子 ：</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#set Java environment</span>JAVA_HOME<span class="token operator">=</span>/usr/local/java/jdk-14.0.1HADOOP_HOME<span class="token operator">=</span>/usr/local/hadoopPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token function">export</span> JAVA_HOME<span class="token function">export</span> HADOOP_HOME</code></pre><p>之后还是source /etc/profile执行，之后输入hadoop version就可以显示出hadoop的版本信息。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验--基于线性表的图书信息管理系统</title>
      <link href="/2020/04/30/shu-ju-jie-gou-shi-yan-ji-yu-xian-xing-biao-de-tu-shu-xin-xi-guan-li-xi-tong/"/>
      <url>/2020/04/30/shu-ju-jie-gou-shi-yan-ji-yu-xian-xing-biao-de-tu-shu-xin-xi-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>本文是依据数据结构习题解析与实验指导（李冬梅）一书中的第一个实验–基于线性表的图书信息管理系统所写的。</p><p>之所以写这个，是因为这个实验不仅涉及到线性表的结构设计，还包括一些线性表的基本操作，个人认为，做完这个实验，基本上对线性表就有一个基本的了解的。</p><p>本文采用编程语言为C</p><p>先说一下题目简介，自己设计一张图书信息表，包括以下10项常用的基本操作：图书信息表的创建和输出、排序、修改、逆序村春、最贵图书的查找、最爱图书的查找、最佳位置图书的查找、新图书的入库、旧图书的出库、图书去重。<br>要求分别用顺序存储结构和链式存储结构来实现。<br>@[toc]</p><h3 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1.顺序存储结构"></a>1.顺序存储结构</h3><p>1.首先说一下定义的结构：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 20</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> number<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span>information<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    information date<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>table<span class="token punctuation">;</span></code></pre><p>2.初始化操作</p><pre class=" language-c"><code class="language-c">table <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    table t<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还有显示操作：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShowTable</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ChangePrice</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.表的创建和输出（因为输入是有一定的格式的，详情请看书，本人有点懒，没有搜到相关pdf，又不喜欢打字，就辛苦你们了🙃）输入以0 0 0 结束</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateTable</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                T<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.表的排序（按照图书价格降序排列)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SortTable</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">&lt;</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>                information temp<span class="token punctuation">;</span>                temp<span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.表的修改（修改图书相应的价格，这里不厚道的😀）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ChangePrice</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">float</span> average <span class="token operator">=</span> sum<span class="token operator">/</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">>=</span>average<span class="token punctuation">)</span><span class="token punctuation">{</span>            T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.最贵图书查找（输出相关信息，要是有相同价格的都输出）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TheMostExpensive</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> Maxprice<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Maxprice<span class="token operator">&lt;</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>            Maxprice<span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>            index<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.根据名字进行图书查找（第一个输入为查找的个数，然后是书名，找到输出，没找到反馈信息，还要输出找到的个数）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SearchByName</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> sttr<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>sttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>sttr<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>T<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"抱歉，没有你的喜爱\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>8.添加新图书（输入：位置，图书相关信息）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertNewDate</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    information temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">.</span>number<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>T<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">></span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T<span class="token operator">-></span>date<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>9.图书出库（输入: 位置）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteInformation</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>T<span class="token operator">-></span>length<span class="token operator">||</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>10.最佳位置图书（就是根据索引，找图书，输入： 搜索个数n，位置*n)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BestPostion</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">></span>T<span class="token operator">-></span>length<span class="token number">-1</span><span class="token operator">||</span>number<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"抱歉，最佳位置上的图书不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>11图书去重（删除书号重复的图书）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteRepeatInformation</span><span class="token punctuation">(</span>table <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>T<span class="token operator">-></span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>T<span class="token operator">-></span>date<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//printf("%d\n",j);</span>                <span class="token function">DeleteInformation</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">=</span>j<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>12.main函数的相关调用</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table t<span class="token operator">=</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">*</span>test<span class="token operator">=</span><span class="token operator">&amp;</span>t<span class="token punctuation">;</span>    <span class="token function">CreateTable</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DeleteRepeatInformation</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowTable</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//SearchByName(test,2);</span>    <span class="token comment" spellcheck="true">//TheMostExpensive(test);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-链式存储结构"><a href="#2-链式存储结构" class="headerlink" title="2.链式存储结构"></a>2.链式存储结构</h3><p>1.相关结构</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 20</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">char</span> number<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> price<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span></code></pre><p>2.初始化操作（这里初始化就是生成一个头）</p><pre class=" language-c"><code class="language-c">LinkList L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>展示链表：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShowLinkList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>number<span class="token punctuation">,</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span>p<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建表（n为创建信息的数目)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateLinkList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LinkList temp<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>number<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            temp<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.表的排序</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SortLinkList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p2<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>p2<span class="token punctuation">;</span>    <span class="token keyword">float</span> minPrice<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>    LinkList point<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>price<span class="token operator">&lt;</span>minPrice<span class="token punctuation">)</span><span class="token punctuation">{</span>            minPrice<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token operator">-></span>price<span class="token punctuation">;</span>            point<span class="token operator">=</span>p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LinkList temp<span class="token operator">=</span>point<span class="token operator">-></span>next<span class="token punctuation">;</span>    point<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    temp<span class="token operator">-></span>next<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p2<span class="token operator">=</span>p2<span class="token operator">-></span>next<span class="token punctuation">;</span>    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.表逆序存储</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ReverseLinkList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LinkList temp<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>        p<span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.最贵图书查找</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MostExpensivePrice</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">SortLinkList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> maxPrice<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token operator">-></span>price<span class="token punctuation">;</span>    LinkList p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>price<span class="token operator">==</span>maxPrice<span class="token punctuation">)</span><span class="token punctuation">{</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %s  %.2f\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>number<span class="token punctuation">,</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span>p<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.新图书入库（n为位置）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertNewInformation</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LinkList temp<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>number<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>8.旧图书出库（n为位置）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteInformation</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LinkList temp<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为很多操作比较简单，又和前面顺序存储表类似，就没写😥，各种操作的要求是一样的。</p><h3 id="3-2-txt文档"><a href="#3-2-txt文档" class="headerlink" title="3.  2.txt文档"></a>3.  2.txt文档</h3><pre class=" language-c"><code class="language-c"><span class="token number">9787302257646</span>  程序设计基础 <span class="token number">25.00</span><span class="token number">9787302164340</span>  程序设计基础第二版 <span class="token number">20.00</span><span class="token number">9787302219972</span>  单片机技术及应用 <span class="token number">32.00</span><span class="token number">9787302203513</span>  单片机原理与技术应用 <span class="token number">26.00</span><span class="token number">9787810827430</span>  工业计算机控制技术原理与应用 <span class="token number">31.00</span><span class="token number">9787811234923</span>  汇编语言程序设计教程 <span class="token number">21.00</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span></code></pre><p>到这里，就结束了，首先说因为初学，代码写的很不好，但是确实可以实现这些功能，如果觉得代码哪里写的不好的可以在下方评论，我看到了会及时更改的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之深搜与广搜</title>
      <link href="/2020/02/11/suan-fa-zhi-shen-sou-yu-guang-sou/"/>
      <url>/2020/02/11/suan-fa-zhi-shen-sou-yu-guang-sou/</url>
      
        <content type="html"><![CDATA[<p>   在经过8次算法课的学习后，自己的能力提升了很多，只不过对于学的知识很多都不是很懂，懂的中也有一些很不熟练，先将自己较为熟练的深搜与广搜做一个整理；</p><p>   深度优先搜索（Depth-First-Search）其概念简要的说就是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.该算法用到的事递归思想；递归需要两个部分：基线条件和递归条件；</p><p> <img src="https://img-blog.csdnimg.cn/20190606074319646.png?xk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>   我们从a出发，先到b,再到e,之后回去，到b,再到c,c再回到f,f再回到b,b再回到a,再从a到d,再从d到g,再从g回到d，再从d回到a,发现所有节点都已经遍历，深度搜索结束；</p><p>   总的来说，深度优先搜索，就是一条路走到底的策略，直到再也不能走为止，这种思想正是可以用递归实现的，因此用深度优先搜索，设立一个停止条件（即没有搜索的东西），然后一次一次的向下递归，直到遍历了所有的节点</p><pre><code>void dfs()//参数用来表示状态  {      进行一些操作，由题目决定    if(到达终点状态)      {         return;      }      if(不符合题意)          return;      if(符合题意)       {          修改操作;        dfs（）；         }    }  </code></pre><p>dfs的题目分为两大类，第一类时在图上进行深搜，图可以选择邻接矩阵进行存储（也可以用vector或者前向星来存储，邻接矩阵比较简单，但是如果点过多的话，就不适用了)，之后再进行遍历，接下来有几道基础题:</p><p>B - Counting Sheep        HDU-2952<br>连通块类的问题，从起点开始上下左右四个方向进行搜索，搜索到的都标记为无羊，表示自己已经搜索过这里，当完全搜不到时，计数器便自加，在搜索下一个有羊的区域，同样还有八个方向的搜索的题目，同理。</p><p>代码：</p><pre><code>#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int dx[4]={0,-1,0,1},dy[4]={-1,0,1,0};//定义搜索方向int n,row,line,number;char a[105][105];//存储图的数组void dfs(int i,int j){    a[i][j]=&#39;.&#39;;    for(int q=0;q&lt;4;q++){        int nx=i+dx[q],ny=j+dy[q];        if(nx&gt;=0&amp;&amp;nx&lt;row&amp;&amp;ny&gt;=0&amp;&amp;ny&lt;line&amp;&amp;a[nx][ny]==&#39;#&#39;){            dfs(nx,ny);//用递归向其他方向搜索        }    }    return ;}int main(){    //freopen(&quot;t.txt&quot;,&quot;r&quot;,stdin);    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++){            int ans=0;        cin&gt;&gt;row&gt;&gt;line;        for(int j=0;j&lt;row;j++)            cin&gt;&gt;a[j];        for(int i=0;i&lt;row;i++){            for(int j=0;j&lt;line;j++){                if(a[i][j]==&#39;#&#39;){                    dfs(i,j);                    ans++;                }            }        }    printf(&quot;%d\n&quot;,ans);    }    return 0;}</code></pre><p>A - 棋盘问题                POJ-1321<br>此题与n皇后问题很像，即放一棵棋子，之后对所有放置其他棋子的方式，进行搜索，直到找到，计数器自加，其中要保证行和列不能有两枚棋子；</p><p>代码：</p><pre><code>#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;char a[10][10];//记录棋盘位置int book[10]={0};int n,k,cnt,m;void dfs(int cur){    if(k==m)//终点状态    {        cnt++;        return ;    }    if(cur&gt;=n)//不符合题意        return ;    for(int j=0; j&lt;n; j++)        if(book[j]==0 &amp;&amp; a[cur][j]==&#39;#&#39;)        {            book[j]=1;            m++;            dfs(cur+1);            book[j]=0;            m--;        }    dfs(cur+1);}int main(){    //freopen(&quot;t.txt&quot;,&quot;r&quot;,stdin);    int i,j;    while(scanf(&quot;%d%d&quot;,&amp;n,&amp;k)&amp;&amp;n!=-1&amp;&amp;k!=-1)//限制条件    {        cnt=0;        m=0;        for(i=0; i&lt;n; i++)            for(j=0;j&lt;n;j++)            scanf(&quot;%c&quot;,&amp;a[i][j]);        dfs(0);        printf(&quot;%d\n&quot;,cnt);    }    return 0;}</code></pre><p>第二类数据类</p><p>这类题本人也没怎么做过，直接放题：<br>HDU 1015-Safecraker(回溯，字符处理)</p><p>接下来时bfs：<br>bfs也是运用递归的思想，不过其运用了队列的数据结构，队列的特性是，先进先出，与栈的先进后出是不同的，废话不多说，放张关于队列的图：<br><img src="https://img-blog.csdnimg.cn/20190606191654613.png" alt=""><br>详细用法:<br>定义一个queue的变量     queue<Type> M<br>查看是否为空范例        M.empty()    是的话返回1，不是返回0;<br>从已有元素后面增加元素   M.push()<br>输出现有元素的个数      M.size()<br>显示第一个元素          M.front()<br>显示最后一个元素        M.back()<br>清除第一个元素          M.pop()<br>（需要加上queue的头文件声明)</p><p>bfs也就是利用队列先进先出的性质，对图进行一层一层的搜索，直到找到元素为止，bfs多用于求图上的到达某点的最短路径（做题甚少，只知道这种题型），即多用于迷宫问题。<br>例题：<br>给定一个大小为N*M的迷宫，由通道(‘.’)和墙壁(‘#’)组成，其中通道S表示起点，通道G表示终点，每一步移动可以达到上下左右中不是墙壁的位置。试求出起点到终点的最小步数。（本题假定迷宫是有解的）(N,M&lt;=100)<br>样例输入：10 10<br><img src="https://img-blog.csdnimg.cn/20190612184710137.png" alt=""><br>样例输出：22</p><p>代码：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;queue&gt;#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std; int m,n;const int INF =100000000;typedef pair&lt;int,int&gt; P;char maze[200][200];int sx,sy;int gx,gy;int d[200][200];void panduan(int m,int n){    for(int i=0;i&lt;m;i++)    for(int j=0;j&lt;m;j++){        if(maze[i][j]==&#39;S&#39;){            sx=i;            sy=j;        }        if(maze[i][j]==&#39;G&#39;){            gx=i;            gy=j;        }    }}int dx[4]={1,0,-1,0},dy[4]={0,1,0,-1};int bfs(){    queue &lt;P&gt; que;    for(int i=0;i&lt;n;i++)    for(int j=0;j&lt;n;j++){        d[i][j]=INF;    }    que.push(P(sx,sy));//将起点加入对列，并且设置其距离为0    d[sx][sy]=0;    while(que.size()){        P p=que.front();        que.pop();        if(p.first==gx&amp;&amp;p.second==gy)break;        for(int i=0;i&lt;4;i++){            int nx=p.first+dx[i];            int ny=p.second+dy[i];            if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;maze[nx][ny]!=&#39;#&#39;&amp;&amp;d[nx][ny]==INF){                que.push(P(nx,ny));                d[nx][ny]=d[p.first][p.second]+1;            }        }    }    return d[gx][gy];}int main(){    //freopen(&quot;t.txt&quot;,&quot;r&quot;,stdin);    scanf(&quot;%d%d&quot;,&amp;m,&amp;n);    for(int i=0;i&lt;m;i++)    for(int j=0;j&lt;n;j++){        scanf(&quot;%c&quot;,&amp;maze[i][j]);    }    panduan(m,n);    int res=bfs();    printf(&quot;%d\n&quot;,res);    return 0;}</code></pre><p>F - 非常可乐  HDU-1495</p><p>   这个题，一共有六种动作，瓶倒杯1，杯1到瓶，瓶到杯2，杯2到瓶，杯一到杯2，杯2到杯1。6种动作是平行的，属于同一级别，之后对每种动作进行搜索，停止条件为有两个容器中有相同的可乐，用一个东西计算搜索的次数，即为答案。</p><pre><code>#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;queue&gt;#include&lt;cstring&gt;using namespace std;int s[3];int book[105][105][105];标记某种状态是否走过int half;struct cup{    int c[3];    int a;}p,temp;void init(){    for(int i=0;i&lt;105;i++)        for(int j=0;j&lt;105;j++)            for(int k=0;k&lt;105;k++)                book[i][j][k]=0;    book[s[0]][s[1]][s[2]]=1;//最初始状态}void bfs(){    queue &lt;cup&gt; q;    p.c[0]=s[0];    p.c[1]=0;    p.c[2]=0;    p.a=0;    q.push(p);//把初始状态压入队列中    while(q.empty()==0)    {        p=q.front();        q.pop();        for(int i=0;i&lt;3;i++)        {            if(p.c[i]&gt;0)            {                for(int j=0;j&lt;3;j++)                {                    temp=p;                    if(i==j)                        continue;                    if(temp.c[i]&gt;s[j]-temp.c[j])//可以倒水，且倒满了                    {                        temp.c[i]-=s[j]-temp.c[j];                        temp.c[j]=s[j];                    }                    else{                               //倒不满                        temp.c[j]+=temp.c[i];                        temp.c[i]=0;                    }                    if(book[temp.c[0]][temp.c[1]][temp.c[2]]==0)                    {                        book[temp.c[0]][temp.c[1]][temp.c[2]]=1;                        temp.a++;                        int d=0;                        for(int k=0;k&lt;3;k++)                        {                            if(temp.c[k]==half)                                d++;                        }                        if(d==2)                        {                            cout&lt;&lt;temp.a&lt;&lt;endl;                            return;                        }                        q.push(temp);                    }                }            }        }    }    printf(&quot;NO\n&quot;);}int main(){    //freopen(&quot;t.txt&quot;,&quot;r&quot;,stdin);    while(1)    {    for(int i=0;i&lt;3;i++)    {        cin&gt;&gt;s[i];    }    if(s[0]==0&amp;&amp;s[1]==0&amp;&amp;s[2]==0)        break;    init();    if(s[0]%2)        cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;    else{        half=s[0]/2;        bfs();    }    }    return 0;}</code></pre><p><strong>搜索的优化:</strong></p><ol><li><p>记忆化搜索：<br> 所谓记忆化搜索就是，在每次状态转移的时候，判断一下这个状态是否已经转移过了，如果转移过了，直接调用他的结果就好了，这可以减小搜索的时间复杂度，并且避免了向栈中压入过多的数据，导致爆栈的错误（不过本人表示从未遇到爆栈的错误。）<br> 例题：<br> 洛谷  p3953<br> 洛谷自带题解！！！</p></li><li><p>剪枝：<br> 剪枝也就是将一些不符合规则的树枝剪掉，来减小时间复杂度<br>例题:<br>POJ  1011<br><a href="https://blog.csdn.net/sj2050/article/details/80645121" target="_blank" rel="noopener">附带详细题解</a></p></li><li><p>双向搜索:<br> 所谓双向搜索，就是从上往下，从下往上一块搜索，之后再“合并数据”，由于自己也不懂，所以附上一篇博文来解释<br> <a href="https://blog.csdn.net/thudaliangrx/article/details/50659007" target="_blank" rel="noopener">双向搜索博客</a></p></li><li><p>迭代加深<br> 所谓迭代加深，就是设定一定的层数限制，然后进行搜索，如果搜不到，则加深层数，直到最后一层为止，这样避免了所要找的结果在很低的层数却花了很长的时间去找</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20190608095837525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""></p><p>例如上图这种情况，如果照常规方法去搜索，那么需要遍历所有节点才能找到，但是如果采用迭代加深的方法，设定一定的层数限制，就可以很快找到。</p><p>自己了解的搜索算法，到这里就没了，没发过什么博文，如果有错误和不当的地方，敬请指正。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次基于hexo博客主题的博客搭建全过程</title>
      <link href="/2020/02/11/ji-lu-yi-ci-ji-yu-hexo-bo-ke-zhu-ti-de-bo-ke-da-jian-quan-guo-cheng/"/>
      <url>/2020/02/11/ji-lu-yi-ci-ji-yu-hexo-bo-ke-zhu-ti-de-bo-ke-da-jian-quan-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo框架部署到github-coding，并修改域名"><a href="#hexo框架部署到github-coding，并修改域名" class="headerlink" title="hexo框架部署到github+coding，并修改域名"></a>hexo框架部署到github+coding，并修改域名</h2><h4 id="部署到github上："><a href="#部署到github上：" class="headerlink" title="部署到github上："></a>部署到github上：</h4><ol><li><p>首先需要下载能让node.js环境，node.js官网下载即可，这里推荐下载lts版本(长期支持版),之后就是傻瓜式安装，一直下一步，安装之后打开cmd,这时可以输入命令<code>node -v</code>和<code>npm -v</code>来查看自己是否安装成功。  <img src="https://img-blog.csdnimg.cn/20200209215235503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""></p></li><li><p>装完之后我们就可以使用npm命令，由于npm安装东西时，访问的时国外的服务器，所以我们这里引用淘宝的镜像源，这样就可以下载速度更快一些,cmd终端输入</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>3.然后就可以使用淘宝镜像源下载东西了，首先安装hexo框架<code>cnpm install -g hexo-cli</code>，（因为绑定淘宝镜像源后就可以用cnpm代替npm了）<br>4.建立一个放博客的目录，然后到这个目录下，cmd输入代码<code>hexo init</code>，一段时间后，初始化完成后，目录就会多许多文件，如下：<br><img src="https://img-blog.csdnimg.cn/20200211151548308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>5.然后cmd下输入命令：<code>hexo s</code>(即启动hexo服务),游览器进入网址120.0.0.1:4000,这时会看到以下页面：<br><img src="https://img-blog.csdnimg.cn/20200211151802322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>这是hexo默认的一个主题，如果想更换，可以在官网找主题下载，这是主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">传送门</a>，<br><img src="https://img-blog.csdnimg.cn/20200211152052787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt="">)点击图片即预览主题，点击名字即进入主题下载，我这里推荐的是matery主题，这是下载<a href="https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.3eded9b9WNoIgB&url=https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">传送门</a><br>如果想更换其他主题，只需在相应的下载界面下载zip压缩文件即可，如下：<img src="https://img-blog.csdnimg.cn/20200211152448348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>下载之后解压，把整个文件夹复制到自己博客目录的themes下<br><img src="https://img-blog.csdnimg.cn/2020021115274332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>文件夹的名字改为matery，<br>6.这时在根目录下有一个_config的文件主题文件夹也有对应的_config的文件，这分别对应博客配置文件，主题配置文件。打开博客配置文件<br><img src="https://img-blog.csdnimg.cn/20200211153154170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>title、author、都可以改，language：改为zh-CN,<br>url可以改为自己的域名，<br>滑到最后，把theme改为matery,（注意:后面有一个空格)<br>这时保存，cmd下，依次运行命令，<code>hexo clean</code> (清理） ,<code>hexo g</code>（生成）,<code>hexo s</code>（运行）再打看游览器进入网址即可看到如下页面：<br><img src="https://img-blog.csdnimg.cn/20200211154054116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt="">主题即替换成功。<br>7.进入github官网，注册账号后，新建一个仓库，细节如下：<br><img src="https://img-blog.csdnimg.cn/20200211154541949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>8.建立好之后，进入博客设置中：</p></li></ol><pre><code>type: gitrepo: git@github.com:Github用户名/github用户名.github.io.git  //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            branch: master</code></pre><p><img src="https://img-blog.csdnimg.cn/20200211154703996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>配置好之后，这时需要向github仓库中推文件的插件，<br>cmd下运行命令<code>cnpm install hexo-deployer-git --save</code><br>然后，运行代码，<code>hexo clean</code>,<code>hexo g</code>,<code>hexo d</code><br>(注意：这里会弹出相应的弹窗让你输入用户名和密码的，下面的coding部署也同理)<br>这时游览器输入你的仓库名，例如vrerain.github.io,这时就会看到你的博客页面，相应配置的修改，包括评论系统的添加，都可以看<a href="https://yq.aliyun.com/articles/742964" target="_blank" rel="noopener">这篇文章</a>，这里就不多说了。</p><h4 id="部署到coding上"><a href="#部署到coding上" class="headerlink" title="部署到coding上"></a>部署到coding上</h4><p>1.注册，新建团队，团队名称自己随意，然后新建项目，新建一个DevOps项目：<br><img src="https://img-blog.csdnimg.cn/20200211155652446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>然后复制自己的项目地址：<br><img src="https://img-blog.csdnimg.cn/20200211155801268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>将自己博客的博客配置文件中的repo：改为如下样子，但是相应的地址改为自己的：<br><img src="https://img-blog.csdnimg.cn/20200211160026278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>然后接着执行三条命令：<code>hexo clean</code>,<code>hexo g</code>,<code>hexo d</code><br>这时相应的coding仓库也有了相应的博客文件。</p><p>这里之所以再把相应的文件部署到coding上，是因为国内访问github太慢，这样我们就可以国外访问github,国内访问coding</p><h4 id="相应的域名配置"><a href="#相应的域名配置" class="headerlink" title="相应的域名配置"></a>相应的域名配置</h4><p>1.这里以阿里云域名为例<br>首先添加国外域名解析，<br><img src="https://img-blog.csdnimg.cn/20200211161014815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>然后就可以进行解析，然后进入github对应的仓库，进入设置，找到如下设置，并改为：<br><img src="https://img-blog.csdnimg.cn/2020021116124792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>设置好之后，如果游览器输入仓库名，跳转到你的域名即设置成功，<br>这里域名解析是需要时间的，可能是一晚上，也可能是一天，只要输入自己的域名能看到自己的博客就算成功（这里可能会报非私密连接，不过是可以访问的）</p><p>2.当国外的解析好之后，就进入了coding的过程，<br>打开coding你的项目的管理页，找到构建与部署选项下的构建静态网站，发布静态网站，保存后，点击立即部署：<br><img src="https://img-blog.csdnimg.cn/20200211162008599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>（这里的访问地址只有最下面的网址）<br>点击对应的访问地址，会看到自己的博客页面。<br>然后阿里云域名添加coding解析：如下图<br><img src="https://img-blog.csdnimg.cn/20200211162812721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""></p><p>3.点击2的第一张图的设置，修改以下配置：<br>（这里要在阿里云的域名解析中把国外的解析暂时关掉，否则证书会申请失败）<br><img src="https://img-blog.csdnimg.cn/20200211162300685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""><br>证书申请成功后，域名解析成功后，就可以通过域名访问自己的博客了，并且因为coding是国内的服务器，访问速度很快</p><h5 id="到这里文章就结束了，如果有不对的地方，敬请指正。"><a href="#到这里文章就结束了，如果有不对的地方，敬请指正。" class="headerlink" title="到这里文章就结束了，如果有不对的地方，敬请指正。"></a>到这里文章就结束了，如果有不对的地方，敬请指正。</h5>]]></content>
      
      
      <categories>
          
          <category> 日常折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django简单版部署服务器</title>
      <link href="/2020/02/09/django-jian-dan-ban-bu-shu-fu-wu-qi/"/>
      <url>/2020/02/09/django-jian-dan-ban-bu-shu-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>首先这是一次没有域名的部署，所以，过程十分的简单，首先本人用的是ubuntu18.04,里面自带了python3,所以就无需再安装python3</p><ol><li>输入命令<code>apt-get update</code>,更新系统程序。</li><li>安装pip3,输入命令<code>apt install python3-pip</code></li><li>安装虚拟环境，到一个合适的文件夹下，然后输入命令<code>pip3 install virtualenv</code>这样就安装好了相应的虚拟环境。</li><li>建立虚拟环境，输入<code>virtualenv --python=/usr/bin/python3 pyweb</code></li><li>激活虚拟环境，进入pywev/bin目录中,输入命令<code>source activate</code></li><li>安装django，<code>pip3 install django==2.1</code>.这里用的是2.1版本，然后建立django项目。</li><li>阿里云一些配置，找到自己服务器的本实例安全组，然后新建规则，配置如下图<img src="https://img-blog.csdnimg.cn/20200204213757836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDI4Mjkw,size_16,color_FFFFFF,t_70" alt=""></li><li><code>python manage.py runserver 0.0.0.0:8000</code>(自己建立的django项目中的settings.py，相应代码中改为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code></li><li>之后游览器输入<code>公网ip :8000</code>就可以看到django的页面。</li><li>若想关闭终端依旧运行django,则需要将8中的命令换为:<code>nohup python manage.py runserver 0.0.0.0:8000 &gt;log 2&gt;1&amp;</code>命令即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
